scalar Time
scalar Upload

directive @client on QUERY | FIELD
directive @trackOperation(eventName: String!) on FIELD_DEFINITION
directive @trackAppOperation(eventName: String!) on FIELD_DEFINITION
directive @trackAppUseOperation on FIELD_DEFINITION
directive @trackToolOperation(eventName: String!) on FIELD_DEFINITION
directive @trackToolUseOperation on FIELD_DEFINITION
directive @trackSharedAppUseOperation on FIELD_DEFINITION
directive @trackSubscriptionOperation(eventName: String!) on FIELD_DEFINITION
directive @trackSubscriptionUseOperation on FIELD_DEFINITION
directive @canAccessInvitation on FIELD_DEFINITION

###############################################################################
### Auth
####################################################################F###########

directive @hasRole(role: AuthRole!) on FIELD_DEFINITION
directive @isMe on FIELD_DEFINITION

enum AuthRole {
  AUTHENTICATED
  ADMIN
  USER
}

###############################################################################
### Auth end
###############################################################################

###############################################################################
### User management
###############################################################################

directive @ownsPersonalAccessToken on FIELD_DEFINITION

enum Role {
  ADMIN
  USER
}

type UserOnboardingStepsCompleted {
  CreatedApp: Boolean
  UploadedCode: Boolean
  InvitedUser: Boolean
  CreatedSubscriptionOffer: Boolean
}

type OrganizationMembership {
  id: ID!
  organization: Organization!
  role: Role!
  user: User!
}

type User {
  id: ID!
  fullName: String!
  memberships: [OrganizationMembership!]! @isMe
  email: String!
  personalAccessTokens: [PersonalAccessTokenEntry!]! @isMe
  onboardingStepsCompleted: UserOnboardingStepsCompleted! @isMe
}

type UserNotFound {
  id: ID!
}

type Query {
  me: User! @hasRole(role: AUTHENTICATED)
}

type PersonalAccessTokenEntry {
  id: ID!
  name: String!
  description: String!
  expiresAt: Time
}

type PersonalAccessTokenCreated {
  entry: PersonalAccessTokenEntry!
  token: String!
}

type PersonalAccessTokenAlreadyExists {
  name: String!
}

type PersonalAccessTokenInvalidName {
  name: String!
  reason: String!
}

input PersonalAccessTokenCreateInput {
  name: String!
  description: String!
  expiresAt: Time
}

union PersonalAccessTokenCreateResult =
    PersonalAccessTokenCreated
  | PersonalAccessTokenAlreadyExists
  | PersonalAccessTokenInvalidName

type ResendEmailVerificationSuccess {
  userId: ID!
}

union ResendEmailVerificationResult =
    ResendEmailVerificationSuccess
  | UserNotFound

type Mutation {
  resendEmailVerification(userId: ID!): ResendEmailVerificationResult!
  personalAccessTokenCreate(
    input: PersonalAccessTokenCreateInput!
  ): PersonalAccessTokenCreateResult! @hasRole(role: AUTHENTICATED)
  personalAccessTokenRevoke(id: ID!): PersonalAccessTokenEntry!
    @ownsPersonalAccessToken
}
###############################################################################
### End of user management
###############################################################################

###############################################################################
### Organization management
###############################################################################

type Organization {
  id: ID!
  name: String!
  slug: String!
  createdAt: Time!
  apps: [App!]!
  members: [OrganizationMembership!]! @hasRole(role: USER)
  pendingInvitations: [OrganizationInvitation!]! @hasRole(role: ADMIN)
  paymentAccount: PaymentAccount @hasRole(role: ADMIN)
  hasCustomerAccount: Boolean!
}

type OrganizationInvitation {
  id: ID!
  email: String!
  organizationName: String!
  invitedAt: Time!
  role: Role!
}

type InvalidEmail {
  email: String!
}

input NewOrganization {
  name: String!
  slug: String
}

input OrganizationMemberEditRoleInput {
  userId: ID!
  role: Role!
}

type OrganizationNotFound {
  id: ID!
  slug: String!
}

type OrganizationRenameFailure {
  result: String!
}

type OrganizationSlugOccupied {
  slug: String!
}

type OrganizationSlugInvalid {
  slug: String!
}

union OrganizationRenameResult =
    Organization
  | OrganizationNotFound
  | OrganizationRenameFailure

union OrganizationQueryResult = Organization | OrganizationNotFound
union OrganizationCreateResult =
    Organization
  | OrganizationSlugOccupied
  | OrganizationSlugInvalid
union OrganizationMemberEditRoleResult =
    OrganizationMembership
  | OrganizationNotFound
  | UserNotFound
union OrganizationMemberRemoveResult =
    Organization
  | OrganizationNotFound
  | UserNotFound

extend type Query {
  organization(organizationSlug: String!): OrganizationQueryResult!
    @hasRole(role: USER)
  organizationById(organizationId: ID!): OrganizationQueryResult! @hasRole(role: USER)
  organizationInvitation(invitationId: ID!): OrganizationInvitationQueryResult
    @canAccessInvitation
}

extend type Mutation {
  organizationCreate(input: NewOrganization!): OrganizationCreateResult!
    @hasRole(role: AUTHENTICATED)
    @trackOperation(eventName: "Organization Create")
  organizationRename(
    organizationId: ID!
    name: String!
  ): OrganizationRenameResult! @hasRole(role: ADMIN)
  organizationMemberEditRole(
    organizationId: ID!
    input: OrganizationMemberEditRoleInput!
  ): OrganizationMemberEditRoleResult! @hasRole(role: ADMIN)
  organizationMemberRemove(
    organizationId: ID!
    memberId: ID!
  ): OrganizationMemberRemoveResult! @hasRole(role: ADMIN)
}

###############################################################################
### End of organization management
###############################################################################

###############################################################################
### Auth0 invitation management
###############################################################################

input Auth0WhiteLabelInvitationInput {
  email: String!
  organizationID: ID!
}

type Auth0WhiteLabelInvitation {
  email: String!

  invitedAt: Time!
}

extend type Mutation {
  Auth0WhiteLabelInvitationCreate(
    input: Auth0WhiteLabelInvitationInput
  ): Auth0WhiteLabelInvitation!
}

###############################################################################
### End of Auth0Organization management
###############################################################################

###############################################################################
### Organization invitation management
###############################################################################

input OrganizationInvitationInput {
  role: Role!
  email: String!
}

type OrganizationInvitationNotFound {
  id: ID!
}

type OrganizationInvitationExists {
  email: String!
}

union OrganizationInvitationQueryResult =
    OrganizationInvitation
  | OrganizationNotFound
  | OrganizationInvitationNotFound

union OrganizationInvitationCreateResult =
    OrganizationInvitation
  | OrganizationNotFound
  | InvalidEmail
  | OrganizationInvitationExists

union OrganizationInvitationAcceptResult = Organization | OrganizationNotFound

type OrganizationInvitationDeleted {
  id: ID!
}

union OrganizationInvitationDeleteResult =
    OrganizationInvitationDeleted
  | OrganizationNotFound
  | OrganizationInvitationNotFound

extend type Mutation {
  organizationInvitationCreate(
    organizationId: ID!
    input: OrganizationInvitationInput
  ): OrganizationInvitationCreateResult!
    @hasRole(role: ADMIN)
    @trackOperation(eventName: "Organization invitation create")
  organizationInvitationAccept(
    invitationId: ID!
  ): OrganizationInvitationAcceptResult
    @canAccessInvitation
    @trackOperation(eventName: "Organization invitation accept")
  organizationInvitationDelete(
    invitationId: ID!
  ): OrganizationInvitationDeleteResult @hasRole(role: ADMIN)
}

###############################################################################
### End of organization invitation management
###############################################################################

###############################################################################
### Tool management
###############################################################################

type Tool {
  id: ID!
  name: String!
  description: String
  user: User!
  publicUrl: String
  sharedUrl: String
  privateUrl: String
  createdAt: Time!
}

type PublicTool {
  id: ID!
  developer: User!
  name: String!
  description: String
  pictureUrl: String
  publicUrl: String!
  createdAt: Time!
}

extend type Query {
  publicTools: [PublicTool!]
  tool(id: ID!): Tool!
  tools: [Tool!]! @hasRole(role: AUTHENTICATED)
}

input NewTool {
  userId: ID!
  manifest: String!
}

type ToolDeleteSuccess {
  result: String!
}

type ToolDeleteFailure {
  result: String!
}

union ToolDeleteResult = ToolDeleteSuccess | ToolDeleteFailure

extend type Mutation {
  toolCreate(input: NewTool!): Tool!
    @trackToolOperation(eventName: "App Create")
  toolPublish(id: ID!): Tool! @trackToolOperation(eventName: "App Publish")
  toolUnpublish(id: ID!): Tool! @trackToolOperation(eventName: "App Unpublish")
  toolDelete(id: ID!): ToolDeleteResult!
    @trackToolOperation(eventName: "App Delete")
}

###############################################################################
### End of tool management
###############################################################################

###############################################################################
### App management
###############################################################################

directive @userCreatedApp on FIELD_DEFINITION
directive @canManageApp on FIELD_DEFINITION
directive @canUseApp on FIELD_DEFINITION

enum AppDeploymentStatus {
  PENDING
  RUNNING
  ERROR
  STOPPED
  UNKNOWN
}

type AppDeploymentVersion {
  id: ID!
  createdAt: Time!
  status: AppDeploymentStatus!
  proxyURL: String
  appVersion: AppVersion!
}

type AppDeployment {
  id: ID!
  name: String!
  current: AppDeploymentVersion
  sharedURL: String
}

type AppDeploymentResourceUsageDataPoint {
  timestamp: Time!
  value: Float!
}

type AppDeploymentResourceUsage {
  current: Float!
  limit: Float
  timeseries: [AppDeploymentResourceUsageDataPoint!]
}

type AppDeploymentWorkload {
  organization: Organization # optional, set if workload is a private organization app
  subscription: AppSubscription # optional, set if workload is related to a subscription
  startedAt: Time!
  status: AppDeploymentStatus!
  logs(last: Int): AppDeployLogEntryConnection!
  cpuUsage: AppDeploymentResourceUsage
  memoryUsageMB: AppDeploymentResourceUsage
}

type AppDeployLogEntryConnection {
  edges: [AppDeployLogEntry!]!
  pageInfo: PageInfo!
}
type AppVersionDocumentationFile {
  filename: String!
  contentBase64: String!
}

type AppVersion {
  id: ID!
  version: String!
  message: String!
  releaseNotes: AppVersionDocumentationFile
  userGuide: AppVersionDocumentationFile
}

input AppVersionInput {
  version: String
  message: String
}

type App {
  id: ID!
  slug: String!
  displayName: String!
  description: String!
  createdBy: User!
  createdAt: Time!
  pictureUrl: String
  defaultDeployment: AppDeployment
}

type AppVersionUploadURL {
  url: String!
}

type AppVersionDownloadURL {
  url: String!
}

input AppCreateInfo {
  appSlug: String!
  displayName: String!
  description: String!
}

input AppDeployInput {
  appRelativePath: String
  secrets: [AppSecret!]
  skipMetadataUpdate: Boolean
}

type AppBuildMessageEvent {
  message: String!
}

type AppBuildErrorEvent {
  message: String!
}

type AppDeploymentStatusEvent {
  status: AppDeploymentStatus
}

union AppDeployEvent =
    AppBuildMessageEvent
  | AppDeploymentStatusEvent
  | AppBuildErrorEvent

input AppDeployLogsInput {
  organizationSlug: String!
  appSlug: String!
}

type AppDeployLogEntry {
  timestamp: Time!
  text: String!
}

input AppRenameInput {
  appID: ID!
  appName: String!
}

input AppDescriptionUpdateInput {
  appID: ID!
  appDescription: String
}

type AppDeleted {
  appSlug: String!
  organizationSlug: String
}

input AppDeleteInput {
  appSlug: String!
  organizationSlug: String!
}

type AppDeploymentHeartbeat {
  status: AppDeploymentStatus!
  proxyURL: String
}

input AppVersionCreateGitHubInput {
  owner: String!
  repo: String!
}

type GitHubRepositoryNotFound {
  owner: String!
  repo: String!
}

union AppVersionCreateGitHubResult = AppVersion | GitHubRepositoryNotFound

input AppWorkloadsInput {
  metricsSince: Time
}

extend type Query {
  app(organizationSlug: String!, appSlug: String!): App @hasRole(role: USER)
  appWorkloads(appID: ID!, input: AppWorkloadsInput): [AppDeploymentWorkload!]! @canManageApp
}

extend type Mutation {
  appCreate(organizationSlug: String!, appData: AppCreateInfo!): App!
    @hasRole(role: USER)
    @trackAppOperation(eventName: "App Create")
  appVersionCreate(appID: ID!, input: AppVersionInput): AppVersion!
    @canManageApp
    @trackAppOperation(eventName: "App Version Create")
  appVersionUploadURL(appVersionID: ID!): AppVersionUploadURL!
    @canManageApp
    @trackAppOperation(eventName: "App Version Upload URL")
  appVersionDownloadURL(appVersionID: ID!): AppVersionDownloadURL!
    @userCreatedApp
    @trackAppOperation(eventName: "App Version Download URL")
  appDeploy(appVersionID: ID!, input: AppDeployInput): AppDeploymentVersion!
    @canManageApp
    @trackAppOperation(eventName: "App Deploy")
  appRename(organizationSlug: String!, appData: AppRenameInput!): App
    @hasRole(role: ADMIN)
  appDescriptionUpdate(
    organizationSlug: String!
    appData: AppDescriptionUpdateInput!
  ): App @hasRole(role: ADMIN)
  appDelete(input: AppDeleteInput!): AppDeleted! @canManageApp
  appDeployHeartbeat(deployID: ID!): AppDeploymentHeartbeat!
    @canUseApp
    @trackAppUseOperation
  appSharedDeployHeartbeat(sharedURLID: ID!): AppDeploymentHeartbeat!
    @trackSharedAppUseOperation
  appVersionCreateGitHub(
    appID: ID!
    input: AppVersionCreateGitHubInput!
  ): AppVersionCreateGitHubResult
    @canManageApp
    @trackAppOperation(eventName: "App Version Create from GitHub")
  appDeployShare(deployID: ID!): AppDeployment!
    @canManageApp
    @trackAppOperation(eventName: "App Share")
  appDeployUnshare(deployID: ID!): AppDeployment!
    @canManageApp
    @trackAppOperation(eventName: "App Unshare")
}

type Subscription {
  appDeployEvents(appDeploymentVersionID: ID!): AppDeployEvent!
  appDeployLogs(input: AppDeployLogsInput!): AppDeployLogEntry!
}

###############################################################################
### End of App management
###############################################################################

###############################################################################
### Subscriptions
###############################################################################

scalar Decimal

directive @canAccessSubscriptionOffer on FIELD_DEFINITION
directive @canAccessSubscription on FIELD_DEFINITION
directive @canManageInboundSubscription on FIELD_DEFINITION
directive @canManageOutboundSubscription on FIELD_DEFINITION

enum SubscriptionOfferStatus {
  ACCEPTED
  WITHDRAWN
  REJECTED
  PENDING
}

enum AppSubscriptionStatus {
  ACTIVE
  WITHDRAWN
  EXPIRED
  CANCELED
}

type AppSubscription {
  id: ID!
  app: App!
  inboundOrganization: Organization!
  outboundOrganization: Organization!
  status: AppSubscriptionStatus!
  createdAt: Time!
  expiresAt: Time
  monthlyPriceUSD: Decimal
}

type PaymentConfiguration {
  monthlyPriceUSD: Decimal!
  trialDays: Int
}

type SubscriptionOffer {
  id: ID!
  email: String!
  name: String!
  app: App!
  offeringOrganization: Organization!
  status: SubscriptionOfferStatus!
  message: String!
  payment: PaymentConfiguration
}

input PaymentConfigurationInput {
  monthlyPriceUSD: Decimal!
  trialDays: Int # no trial if not set, or not greater than zero
}

input SubscriptionOfferInput {
  email: String!
  appSlug: String!
  name: String
  message: String
  payment: PaymentConfigurationInput # subscription offer is free if no payment config
}

type SubscriptionOfferNotFound {
  id: ID!
}

type SubscriptionOfferInvalidStatus {
  id: ID!
}

type SubscriptionOfferCheckoutSession {
  portalURL: String!
}

type OrganizationMissingPaymentMethod {
  organizationID: ID!
}

type AppSubscriptionNotFound {
  id: ID!
}

type AppSubscriptionInvalidStatus {
  id: ID!
}

type OrganizationHasNoPaymentAccount {
  organizationID: ID!
}

type SubscriptionOfferInvalidMonthlyPriceUSD {
  monthlyPriceUSD: Decimal!
}

type SubscriptionOfferInvalidTrialDays {
  trialDays: Int!
  maxTrialDays: Int!
}

union SubscriptionOfferCreateResult =
    SubscriptionOffer
  | InvalidEmail
  | OrganizationHasNoPaymentAccount
  | SubscriptionOfferInvalidMonthlyPriceUSD
  | SubscriptionOfferInvalidTrialDays

union SubscriptionOfferResult = SubscriptionOffer | SubscriptionOfferNotFound

union SubscriptionOfferAcceptResult =
    AppSubscription
  | OrganizationMissingPaymentMethod
  | SubscriptionOfferCheckoutSession
  | SubscriptionOfferNotFound
  | SubscriptionOfferInvalidStatus

union SubscriptionOfferRejectResult =
    SubscriptionOffer
  | SubscriptionOfferNotFound
  | SubscriptionOfferInvalidStatus

union SubscriptionOfferWithdraw =
    SubscriptionOffer
  | SubscriptionOfferNotFound
  | SubscriptionOfferInvalidStatus

union AppSubscriptionCancelResult =
    AppSubscription
  | AppSubscriptionNotFound
  | AppSubscriptionInvalidStatus

extend type Organization {
  outboundSubscriptionOffers: [SubscriptionOffer!]! @hasRole(role: ADMIN)
  outboundSubscriptions: [AppSubscription!]! @hasRole(role: ADMIN)
}

extend type App {
  subscription: AppSubscription
}

extend type Query {
  subscription(subscriptionId: ID!): AppSubscription! @canAccessSubscription
  subscriptionOffer(subscriptionOfferId: ID!): SubscriptionOfferResult!
    @canAccessSubscriptionOffer
}

extend type Mutation {
  subscriptionOfferCreate(
    input: SubscriptionOfferInput!
    organizationId: ID!
  ): SubscriptionOfferCreateResult!
    @hasRole(role: ADMIN)
    @trackSubscriptionOperation(eventName: "Subscription Offer Create")
  subscriptionOfferAccept(
    subscriptionOfferId: ID!
    organizationId: ID!
  ): SubscriptionOfferAcceptResult!
    @canAccessSubscriptionOffer
    @trackSubscriptionOperation(eventName: "Subscription Offer Accept")
  subscriptionOfferReject(
    subscriptionOfferId: ID!
  ): SubscriptionOfferRejectResult!
    @canAccessSubscriptionOffer
    @trackSubscriptionOperation(eventName: "Subscription Offer Reject")
  subscriptionOfferWithdraw(
    subscriptionOfferId: ID!
  ): SubscriptionOfferWithdraw!
    @canAccessSubscriptionOffer
    @trackSubscriptionOperation(eventName: "Subscription Offer Withdraw")
  subscriptionCancelInbound(subscriptionId: ID!): AppSubscriptionCancelResult!
    @canManageInboundSubscription
    @trackSubscriptionOperation(eventName: "Subscription Cancel Inbound")
  subscriptionCancelOutbound(subscriptionId: ID!): AppSubscriptionCancelResult!
    @canManageOutboundSubscription
    @trackSubscriptionOperation(eventName: "Subscription Cancel Outbound")
  subscriptionDeployHeartbeat(subscriptionId: ID!): AppDeploymentHeartbeat!
    @canAccessSubscription
    @trackSubscriptionUseOperation
}

###############################################################################
### End of Subscriptions
###############################################################################

###############################################################################
### Releases
###############################################################################

type GithubRepositoryRelease {
  id: String!
  name: String!
  body: String!
  publishedAt: Time!
}

extend type Query {
  numerousReleases: [GithubRepositoryRelease!]!
}

###############################################################################
### Releases
###############################################################################

###############################################################################
### Customer accounts
###############################################################################

type CustomerAccountPortalURL {
  url: String!
}

extend type Mutation {
  customerAccountCreatePortalURL(
    organizationId: ID!
  ): CustomerAccountPortalURL! @hasRole(role: ADMIN)
}

###############################################################################
### End of Customer accounts
###############################################################################

###############################################################################
### Job management
###############################################################################

type Job {
  id: ID!
  status: String
  proxyUrl: String
  user: User!
  createdAt: Time!
}

type JobNotFound {
  id: ID!
}

type JobHeartbeatSuccess {
  id: ID!
}

type JobHeartbeatFailure {
  result: String!
}

union JobHeartbeatResult =
    JobHeartbeatSuccess
  | JobHeartbeatFailure
  | JobNotFound

type StopJobPayload {
  message: String!
}

enum ToolHashType {
  public
  shared
  private
}

extend type Query {
  job(toolHash: ID!, hashType: ToolHashType!): Job
  jobsByTool(id: ID!): [Job!]!
}

extend type Mutation {
  jobStart(toolHash: ID!, hashType: ToolHashType!): Job! @trackToolUseOperation
  jobStop(id: ID!): StopJobPayload!
  jobHeartbeat(id: ID!): JobHeartbeatResult!
}

###############################################################################
### End of job management
###############################################################################

###############################################################################
### CLI Push command
###############################################################################

type buildConfiguration {
  buildId: ID!
}

type BuildEventSuccess {
  result: String!
}

type BuildEventFailure {
  result: String!
}

type BuildEventInfo {
  result: String!
}

union BuildEvent = BuildEventSuccess | BuildEventFailure | BuildEventInfo

input AppSecret {
  name: String!
  base64Value: String!
}

input BuildPushInput {
  secrets: [AppSecret!]
}

extend type Mutation {
  buildPush(file: Upload!, id: ID!, input: BuildPushInput): buildConfiguration!
    @trackOperation(eventName: "App Push")
}

extend type Subscription {
  buildEvents(buildId: ID!, appPath: String): BuildEvent!
}

extend type Subscription {
  deployEvents(toolID: ID!): BuildEvent!
}

###############################################################################
### End of CLI Push command
###############################################################################

###############################################################################
### CLI Logs command
###############################################################################

type LogMessage {
  time: Time!
  message: String!
}

extend type Subscription {
  logs(appId: ID!): LogMessage!
}

###############################################################################
### End of CLI Logs command
###############################################################################

###############################################################################
## Paginiation
###############################################################################

type PageInfo {
  startCursor: ID
  endCursor: ID
  hasNextPage: Boolean!
}

###############################################################################
## End of Pagination
###############################################################################

###############################################################################
## Collections
###############################################################################

directive @canAccessCollection on FIELD_DEFINITION

type Collection {
  id: ID!
  key: ID!

  files(after: ID, first: Int, tag: TagInput): CollectionFileConnection!
  documents(after: ID, first: Int, tag: TagInput): CollectionDocumentConnection!
  collections(after: ID, first: Int): CollectionConnection!

  document(key: ID!): CollectionDocument
}

type CollectionEdge {
  node: Collection!
  cursor: ID!
}

type CollectionConnection {
  edges: [CollectionEdge!]!
  pageInfo: PageInfo!
}

type CollectionNotFound {
  id: ID!
}

union CollectionResult = Collection | CollectionNotFound
union CollectionCreateResult = Collection | CollectionNotFound

extend type Query {
  collection(id: ID!): CollectionResult
}

extend type Mutation {
  # idempotent
  collectionCreate(
    organizationID: ID!
    key: ID!
    parentID: ID
  ): CollectionCreateResult! @canAccessCollection
}

###############################################################################
## End of Collections
###############################################################################

###############################################################################
## Documents
###############################################################################

directive @canAccessCollectionDocument on FIELD_DEFINITION

scalar Base64JSON

type CollectionDocument {
  id: ID!
  key: ID!
  data: Base64JSON!
  tags: [Tag!]!
}

type CollectionDocumentNotFound {
  id: ID!
}

type CollectionDocumentEdge {
  node: CollectionDocument!
  cursor: ID!
}

type CollectionDocumentConnection {
  edges: [CollectionDocumentEdge!]!
  pageInfo: PageInfo!
}

union CollectionDocumentResult = CollectionDocument | CollectionDocumentNotFound
union CollectionDocumentSetResult = CollectionDocument | CollectionNotFound
union CollectionDocumentDeleteResult =
    CollectionDocument
  | CollectionDocumentNotFound

extend type Query {
  collectionDocument(id: ID!): CollectionDocumentResult
    @canAccessCollectionDocument
}

extend type Mutation {
  collectionDocumentSet(
    collectionID: ID!
    key: ID!
    data: Base64JSON!
  ): CollectionDocumentSetResult! @canAccessCollection
  collectionDocumentDelete(id: ID!): CollectionDocumentDeleteResult!
    @canAccessCollectionDocument
  collectionDocumentTagAdd(id: ID!, tag: TagInput!): CollectionDocumentResult!
    @canAccessCollectionDocument
  collectionDocumentTagDelete(id: ID!, key: String!): CollectionDocumentResult!
    @canAccessCollectionDocument
}

###############################################################################
## End of Documents
###############################################################################

###############################################################################
## Files
###############################################################################

directive @canAccessCollectionFile on FIELD_DEFINITION

type CollectionFile {
  id: ID!
  key: ID!
  tags: [Tag!]!

  downloadURL: String # nullable because a file might not be uploaded already
  uploadURL: String # data can be overwritten, null if an URL get server error
}

type CollectionFileNotFound {
  id: ID!
}

type CollectionFileEdge {
  node: CollectionFile!
  cursor: ID!
}

type CollectionFileConnection {
  edges: [CollectionFileEdge!]!
  pageInfo: PageInfo!
}

union CollectionFileResult = CollectionFile | CollectionFileNotFound
union CollectionFileCreateResult = CollectionFile | CollectionNotFound
union CollectionFileDeleteResult = CollectionFile | CollectionFileNotFound

extend type Query {
  collectionFile(id: ID!): CollectionFileResult @canAccessCollectionFile
}

extend type Mutation {
  # idempotent
  collectionFileCreate(
    collectionID: ID!
    key: ID!
  ): CollectionFileCreateResult! @canAccessCollection
  collectionFileDelete(id: ID!): CollectionFileDeleteResult!
    @canAccessCollectionFile
  collectionFileTagAdd(id: ID!, tag: TagInput!): CollectionFileResult!
    @canAccessCollectionFile
  collectionFileTagDelete(id: ID!, key: String!): CollectionFileResult!
    @canAccessCollectionFile
}

###############################################################################
## End of Files
###############################################################################

###############################################################################
## Tags
###############################################################################

input TagInput {
  key: String!
  value: String!
}

type Tag {
  key: String!
  value: String!
}

###############################################################################
## End of Tags
###############################################################################

###############################################################################
### Payment
###############################################################################

enum PaymentAccountStatus {
  RESTRICTED
  VERIFIED
  UNKNOWN
}

type PaymentAccount {
  id: ID!
  status: PaymentAccountStatus
}

type PaymentAccountURL {
  url: String!
}

type PaymentAccountNotFound {
  organizationID: ID!
}

type PaymentAccountExists {
  organizationSlug: String!
  paymentAccount: PaymentAccount!
}

type PaymentAccountHasActiveSubscriptions {
  organizationID: ID!
  activeSubscriptionsCount: Int!
}

type PaymentAccountDeleted {
  organizationID: ID!
}

union PaymentAccountCreateResult = PaymentAccount | PaymentAccountExists
union PaymentAccountURLResult = PaymentAccountURL | PaymentAccountNotFound
union PaymentAccountDeleteResult =
    PaymentAccountNotFound
  | PaymentAccountHasActiveSubscriptions
  | PaymentAccountDeleted

extend type Mutation {
  paymentAccountCreate(organizationSlug: String!): PaymentAccountCreateResult!
    @hasRole(role: ADMIN)
  paymentAccountOnboardURLCreate(
    organizationSlug: String!
  ): PaymentAccountURLResult! @hasRole(role: ADMIN)
  paymentAccountUpdateURLCreate(
    organizationSlug: String!
  ): PaymentAccountURLResult! @hasRole(role: ADMIN)
  paymentAccountDelete(organizationSlug: String!): PaymentAccountDeleteResult!
    @hasRole(role: ADMIN)
}

###############################################################################
### End of Payment
###############################################################################

###############################################################################
### Version check
###############################################################################

type VersionCheckOK {
  version: String!
}

type VersionCheckWarning {
  message: String!
}

type VersionCheckCritical {
  message: String!
}

type VersionUnknown {
  version: String!
}

union VersionCheckResult =
    VersionCheckOK
  | VersionCheckWarning
  | VersionCheckCritical
  | VersionUnknown

extend type Query {
  checkVersion(version: String!): VersionCheckResult!
}

###############################################################################
### Version check end
###############################################################################

# Task execution logs subscription input
# input TaskExecutionLogsInput {
#   taskId: ID!
# }

# Extend subscriptions for task execution logs
# extend type Subscription {
#   taskExecutionLogs(input: TaskExecutionLogsInput!): TaskLogEntry!
# }
