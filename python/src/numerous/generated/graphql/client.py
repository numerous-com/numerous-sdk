# Generated by ariadne-codegen
# Source: queries.gql

from typing import Any, AsyncIterator, Dict, Optional, Union

from .all_elements import AllElements
from .async_base_client import AsyncBaseClient
from .base_model import UNSET, UnsetType
from .collection_collections import CollectionCollections
from .collection_create import CollectionCreate
from .collection_document import CollectionDocument
from .collection_document_delete import CollectionDocumentDelete
from .collection_document_set import CollectionDocumentSet
from .collection_document_tag_add import CollectionDocumentTagAdd
from .collection_document_tag_delete import CollectionDocumentTagDelete
from .collection_documents import CollectionDocuments
from .input_types import ElementInput, TagInput
from .update_element import UpdateElement
from .updates import Updates


def gql(q: str) -> str:
    return q


class Client(AsyncBaseClient):
    async def all_elements(self, tool_session_id: str, **kwargs: Any) -> AllElements:
        query = gql(
            """
            query AllElements($toolSessionId: ID!) {
              session: toolSession(id: $toolSessionId) {
                id
                clientID
                all: allElements {
                  __typename
                  id
                  name
                  graphContext {
                    ...GraphContext
                  }
                  ...ButtonValue
                  ...TextFieldValue
                  ...NumberFieldValue
                  ...HTMLValue
                  ...SliderValue
                }
              }
            }

            fragment ButtonValue on Button {
              buttonValue: value
            }

            fragment GraphContext on ElementGraphContext {
              parent {
                __typename
                id
              }
              affectedBy {
                id
              }
              affects {
                id
              }
            }

            fragment HTMLValue on HTMLElement {
              html
            }

            fragment NumberFieldValue on NumberField {
              numberValue: value
            }

            fragment SliderValue on SliderElement {
              sliderValue: value
              minValue
              maxValue
            }

            fragment TextFieldValue on TextField {
              textValue: value
            }
            """
        )
        variables: Dict[str, object] = {"toolSessionId": tool_session_id}
        response = await self.execute(
            query=query, operation_name="AllElements", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return AllElements.model_validate(data)

    async def update_element(
        self, session_id: str, client_id: str, element: ElementInput, **kwargs: Any
    ) -> UpdateElement:
        query = gql(
            """
            mutation UpdateElement($sessionID: ID!, $clientID: ID!, $element: ElementInput!) {
              elementUpdate(toolSessionId: $sessionID, clientId: $clientID, element: $element) {
                __typename
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "sessionID": session_id,
            "clientID": client_id,
            "element": element,
        }
        response = await self.execute(
            query=query, operation_name="UpdateElement", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateElement.model_validate(data)

    async def updates(
        self, session_id: str, client_id: str, **kwargs: Any
    ) -> AsyncIterator[Updates]:
        query = gql(
            """
            subscription Updates($sessionId: ID!, $clientId: ID!) {
              toolSessionEvent(toolSessionId: $sessionId, clientId: $clientId) {
                __typename
                ... on ToolSessionElementUpdated {
                  element {
                    __typename
                    id
                    name
                    graphContext {
                      ...GraphContext
                    }
                    ...ButtonValue
                    ...TextFieldValue
                    ...NumberFieldValue
                    ...HTMLValue
                    ...SliderValue
                  }
                }
                ... on ToolSessionActionTriggered {
                  element {
                    id
                    name
                  }
                }
              }
            }

            fragment ButtonValue on Button {
              buttonValue: value
            }

            fragment GraphContext on ElementGraphContext {
              parent {
                __typename
                id
              }
              affectedBy {
                id
              }
              affects {
                id
              }
            }

            fragment HTMLValue on HTMLElement {
              html
            }

            fragment NumberFieldValue on NumberField {
              numberValue: value
            }

            fragment SliderValue on SliderElement {
              sliderValue: value
              minValue
              maxValue
            }

            fragment TextFieldValue on TextField {
              textValue: value
            }
            """
        )
        variables: Dict[str, object] = {"sessionId": session_id, "clientId": client_id}
        async for data in self.execute_ws(
            query=query, operation_name="Updates", variables=variables, **kwargs
        ):
            yield Updates.model_validate(data)

    async def collection_create(
        self,
        organization_id: str,
        key: str,
        parent_id: Union[Optional[str], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CollectionCreate:
        query = gql(
            """
            mutation CollectionCreate($organizationID: ID!, $key: ID!, $parentID: ID) {
              collectionCreate(
                organizationID: $organizationID
                key: $key
                parentID: $parentID
              ) {
                __typename
                ... on Collection {
                  ...CollectionReference
                }
                ... on CollectionNotFound {
                  ...CollectionNotFound
                }
              }
            }

            fragment CollectionNotFound on CollectionNotFound {
              id
            }

            fragment CollectionReference on Collection {
              id
              key
            }
            """
        )
        variables: Dict[str, object] = {
            "organizationID": organization_id,
            "key": key,
            "parentID": parent_id,
        }
        response = await self.execute(
            query=query,
            operation_name="CollectionCreate",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CollectionCreate.model_validate(data)

    async def collection_collections(
        self,
        organization_id: str,
        key: str,
        after: Union[Optional[str], UnsetType] = UNSET,
        first: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CollectionCollections:
        query = gql(
            """
            mutation CollectionCollections($organizationID: ID!, $key: ID!, $after: ID, $first: Int) {
              collectionCreate(organizationID: $organizationID, key: $key) {
                __typename
                ... on Collection {
                  id
                  key
                  collections(after: $after, first: $first) {
                    edges {
                      node {
                        ... on Collection {
                          ...CollectionReference
                        }
                      }
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            }

            fragment CollectionReference on Collection {
              id
              key
            }
            """
        )
        variables: Dict[str, object] = {
            "organizationID": organization_id,
            "key": key,
            "after": after,
            "first": first,
        }
        response = await self.execute(
            query=query,
            operation_name="CollectionCollections",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CollectionCollections.model_validate(data)

    async def collection_document(
        self, organization_id: str, key: str, doc_key: str, **kwargs: Any
    ) -> CollectionDocument:
        query = gql(
            """
            mutation CollectionDocument($organizationID: ID!, $key: ID!, $docKey: ID!) {
              collectionCreate(organizationID: $organizationID, key: $key) {
                __typename
                ... on Collection {
                  document(key: $docKey) {
                    __typename
                    ... on CollectionDocument {
                      ...CollectionDocumentReference
                    }
                  }
                }
              }
            }

            fragment CollectionDocumentReference on CollectionDocument {
              id
              key
              data
              tags {
                key
                value
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "organizationID": organization_id,
            "key": key,
            "docKey": doc_key,
        }
        response = await self.execute(
            query=query,
            operation_name="CollectionDocument",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CollectionDocument.model_validate(data)

    async def collection_document_set(
        self, collection_id: str, key: str, data: Any, **kwargs: Any
    ) -> CollectionDocumentSet:
        query = gql(
            """
            mutation collectionDocumentSet($collectionID: ID!, $key: ID!, $data: Base64JSON!) {
              collectionDocumentSet(collectionID: $collectionID, key: $key, data: $data) {
                __typename
                ... on CollectionDocument {
                  ...CollectionDocumentReference
                }
              }
            }

            fragment CollectionDocumentReference on CollectionDocument {
              id
              key
              data
              tags {
                key
                value
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "collectionID": collection_id,
            "key": key,
            "data": data,
        }
        response = await self.execute(
            query=query,
            operation_name="collectionDocumentSet",
            variables=variables,
            **kwargs
        )
        _data = self.get_data(response)
        return CollectionDocumentSet.model_validate(_data)

    async def collection_document_delete(
        self, id: str, **kwargs: Any
    ) -> CollectionDocumentDelete:
        query = gql(
            """
            mutation collectionDocumentDelete($id: ID!) {
              collectionDocumentDelete(id: $id) {
                __typename
                ... on CollectionDocument {
                  ...CollectionDocumentReference
                }
              }
            }

            fragment CollectionDocumentReference on CollectionDocument {
              id
              key
              data
              tags {
                key
                value
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id}
        response = await self.execute(
            query=query,
            operation_name="collectionDocumentDelete",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CollectionDocumentDelete.model_validate(data)

    async def collection_document_tag_add(
        self, id: str, tag: TagInput, **kwargs: Any
    ) -> CollectionDocumentTagAdd:
        query = gql(
            """
            mutation collectionDocumentTagAdd($id: ID!, $tag: TagInput!) {
              collectionDocumentTagAdd(id: $id, tag: $tag) {
                __typename
                ... on CollectionDocument {
                  ...CollectionDocumentReference
                }
              }
            }

            fragment CollectionDocumentReference on CollectionDocument {
              id
              key
              data
              tags {
                key
                value
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "tag": tag}
        response = await self.execute(
            query=query,
            operation_name="collectionDocumentTagAdd",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CollectionDocumentTagAdd.model_validate(data)

    async def collection_document_tag_delete(
        self, id: str, tag_key: str, **kwargs: Any
    ) -> CollectionDocumentTagDelete:
        query = gql(
            """
            mutation collectionDocumentTagDelete($id: ID!, $tag_key: String!) {
              collectionDocumentTagDelete(id: $id, key: $tag_key) {
                __typename
                ... on CollectionDocument {
                  ...CollectionDocumentReference
                }
              }
            }

            fragment CollectionDocumentReference on CollectionDocument {
              id
              key
              data
              tags {
                key
                value
              }
            }
            """
        )
        variables: Dict[str, object] = {"id": id, "tag_key": tag_key}
        response = await self.execute(
            query=query,
            operation_name="collectionDocumentTagDelete",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CollectionDocumentTagDelete.model_validate(data)

    async def collection_documents(
        self,
        organization_id: str,
        key: str,
        tag: Union[Optional[TagInput], UnsetType] = UNSET,
        after: Union[Optional[str], UnsetType] = UNSET,
        first: Union[Optional[int], UnsetType] = UNSET,
        **kwargs: Any
    ) -> CollectionDocuments:
        query = gql(
            """
            mutation collectionDocuments($organizationID: ID!, $key: ID!, $tag: TagInput, $after: ID, $first: Int) {
              collectionCreate(organizationID: $organizationID, key: $key) {
                __typename
                ... on Collection {
                  id
                  key
                  documents(after: $after, first: $first, tag: $tag) {
                    edges {
                      node {
                        __typename
                        ... on CollectionDocument {
                          ...CollectionDocumentReference
                        }
                      }
                    }
                    pageInfo {
                      hasNextPage
                      endCursor
                    }
                  }
                }
              }
            }

            fragment CollectionDocumentReference on CollectionDocument {
              id
              key
              data
              tags {
                key
                value
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "organizationID": organization_id,
            "key": key,
            "tag": tag,
            "after": after,
            "first": first,
        }
        response = await self.execute(
            query=query,
            operation_name="collectionDocuments",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return CollectionDocuments.model_validate(data)
