# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import CollectionFileReference


class CollectionFiles(BaseModel):
    collection: Optional[
        Annotated[
            Union[
                "CollectionFilesCollectionCollection",
                "CollectionFilesCollectionCollectionNotFound",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class CollectionFilesCollectionCollection(BaseModel):
    typename__: Literal["Collection"] = Field(alias="__typename")
    id: str
    key: str
    files: "CollectionFilesCollectionCollectionFiles"


class CollectionFilesCollectionCollectionFiles(BaseModel):
    edges: List["CollectionFilesCollectionCollectionFilesEdges"]
    page_info: "CollectionFilesCollectionCollectionFilesPageInfo" = Field(
        alias="pageInfo"
    )


class CollectionFilesCollectionCollectionFilesEdges(BaseModel):
    node: "CollectionFilesCollectionCollectionFilesEdgesNode"


class CollectionFilesCollectionCollectionFilesEdgesNode(CollectionFileReference):
    typename__: Literal["CollectionFile"] = Field(alias="__typename")


class CollectionFilesCollectionCollectionFilesPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


class CollectionFilesCollectionCollectionNotFound(BaseModel):
    typename__: Literal["CollectionNotFound"] = Field(alias="__typename")


CollectionFiles.model_rebuild()
CollectionFilesCollectionCollection.model_rebuild()
CollectionFilesCollectionCollectionFiles.model_rebuild()
CollectionFilesCollectionCollectionFilesEdges.model_rebuild()
