# Generated by ariadne-codegen
# Source: queries.gql

from typing import List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import CollectionFileReference


class CollectionFiles(BaseModel):
    collection_create: Union[
        "CollectionFilesCollectionCreateCollection",
        "CollectionFilesCollectionCreateCollectionNotFound",
    ] = Field(alias="collectionCreate", discriminator="typename__")


class CollectionFilesCollectionCreateCollection(BaseModel):
    typename__: Literal["Collection"] = Field(alias="__typename")
    id: str
    key: str
    files: "CollectionFilesCollectionCreateCollectionFiles"


class CollectionFilesCollectionCreateCollectionFiles(BaseModel):
    edges: List["CollectionFilesCollectionCreateCollectionFilesEdges"]
    page_info: "CollectionFilesCollectionCreateCollectionFilesPageInfo" = Field(
        alias="pageInfo"
    )


class CollectionFilesCollectionCreateCollectionFilesEdges(BaseModel):
    node: "CollectionFilesCollectionCreateCollectionFilesEdgesNode"


class CollectionFilesCollectionCreateCollectionFilesEdgesNode(CollectionFileReference):
    typename__: Literal["CollectionFile"] = Field(alias="__typename")


class CollectionFilesCollectionCreateCollectionFilesPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


class CollectionFilesCollectionCreateCollectionNotFound(BaseModel):
    typename__: Literal["CollectionNotFound"] = Field(alias="__typename")


CollectionFiles.model_rebuild()
CollectionFilesCollectionCreateCollection.model_rebuild()
CollectionFilesCollectionCreateCollectionFiles.model_rebuild()
CollectionFilesCollectionCreateCollectionFilesEdges.model_rebuild()
