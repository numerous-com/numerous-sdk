# Generated by ariadne-codegen
# Source: queries.gql

from typing import Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import CollectionDocumentReference


class CollectionDocument(BaseModel):
    collection_create: Union[
        "CollectionDocumentCollectionCreateCollection",
        "CollectionDocumentCollectionCreateCollectionNotFound",
    ] = Field(alias="collectionCreate", discriminator="typename__")


class CollectionDocumentCollectionCreateCollection(BaseModel):
    typename__: Literal["Collection"] = Field(alias="__typename")
    document: Optional["CollectionDocumentCollectionCreateCollectionDocument"]


class CollectionDocumentCollectionCreateCollectionDocument(CollectionDocumentReference):
    typename__: Literal["CollectionDocument"] = Field(alias="__typename")


class CollectionDocumentCollectionCreateCollectionNotFound(BaseModel):
    typename__: Literal["CollectionNotFound"] = Field(alias="__typename")


CollectionDocument.model_rebuild()
CollectionDocumentCollectionCreateCollection.model_rebuild()
