# Generated by ariadne-codegen
# Source: queries.gql

from typing import List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import CollectionReference


class CollectionCollections(BaseModel):
    collection_create: Union[
        "CollectionCollectionsCollectionCreateCollection",
        "CollectionCollectionsCollectionCreateCollectionNotFound",
    ] = Field(alias="collectionCreate", discriminator="typename__")


class CollectionCollectionsCollectionCreateCollection(BaseModel):
    typename__: Literal["Collection"] = Field(alias="__typename")
    id: str
    key: str
    collections: "CollectionCollectionsCollectionCreateCollectionCollections"


class CollectionCollectionsCollectionCreateCollectionCollections(BaseModel):
    edges: List["CollectionCollectionsCollectionCreateCollectionCollectionsEdges"]
    page_info: "CollectionCollectionsCollectionCreateCollectionCollectionsPageInfo" = (
        Field(alias="pageInfo")
    )


class CollectionCollectionsCollectionCreateCollectionCollectionsEdges(BaseModel):
    node: "CollectionCollectionsCollectionCreateCollectionCollectionsEdgesNode"


class CollectionCollectionsCollectionCreateCollectionCollectionsEdgesNode(
    CollectionReference
):
    pass


class CollectionCollectionsCollectionCreateCollectionCollectionsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


class CollectionCollectionsCollectionCreateCollectionNotFound(BaseModel):
    typename__: Literal["CollectionNotFound"] = Field(alias="__typename")


CollectionCollections.model_rebuild()
CollectionCollectionsCollectionCreateCollection.model_rebuild()
CollectionCollectionsCollectionCreateCollectionCollections.model_rebuild()
CollectionCollectionsCollectionCreateCollectionCollectionsEdges.model_rebuild()
