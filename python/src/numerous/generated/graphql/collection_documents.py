# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import CollectionDocumentReference


class CollectionDocuments(BaseModel):
    collection: Optional[
        Annotated[
            Union[
                "CollectionDocumentsCollectionCollection",
                "CollectionDocumentsCollectionCollectionNotFound",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class CollectionDocumentsCollectionCollection(BaseModel):
    typename__: Literal["Collection"] = Field(alias="__typename")
    id: str
    key: str
    documents: "CollectionDocumentsCollectionCollectionDocuments"


class CollectionDocumentsCollectionCollectionDocuments(BaseModel):
    edges: List["CollectionDocumentsCollectionCollectionDocumentsEdges"]
    page_info: "CollectionDocumentsCollectionCollectionDocumentsPageInfo" = Field(
        alias="pageInfo"
    )


class CollectionDocumentsCollectionCollectionDocumentsEdges(BaseModel):
    node: "CollectionDocumentsCollectionCollectionDocumentsEdgesNode"


class CollectionDocumentsCollectionCollectionDocumentsEdgesNode(
    CollectionDocumentReference
):
    typename__: Literal["CollectionDocument"] = Field(alias="__typename")


class CollectionDocumentsCollectionCollectionDocumentsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


class CollectionDocumentsCollectionCollectionNotFound(BaseModel):
    typename__: Literal["CollectionNotFound"] = Field(alias="__typename")


CollectionDocuments.model_rebuild()
CollectionDocumentsCollectionCollection.model_rebuild()
CollectionDocumentsCollectionCollectionDocuments.model_rebuild()
CollectionDocumentsCollectionCollectionDocumentsEdges.model_rebuild()
