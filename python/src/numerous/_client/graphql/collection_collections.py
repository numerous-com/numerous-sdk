# Generated by ariadne-codegen
# Source: queries.gql

from typing import Annotated, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .fragments import CollectionReference


class CollectionCollections(BaseModel):
    collection: Optional[
        Annotated[
            Union[
                "CollectionCollectionsCollectionCollection",
                "CollectionCollectionsCollectionCollectionNotFound",
            ],
            Field(discriminator="typename__"),
        ]
    ]


class CollectionCollectionsCollectionCollection(BaseModel):
    typename__: Literal["Collection"] = Field(alias="__typename")
    id: str
    key: str
    collections: "CollectionCollectionsCollectionCollectionCollections"


class CollectionCollectionsCollectionCollectionCollections(BaseModel):
    edges: List["CollectionCollectionsCollectionCollectionCollectionsEdges"]
    page_info: "CollectionCollectionsCollectionCollectionCollectionsPageInfo" = Field(
        alias="pageInfo"
    )


class CollectionCollectionsCollectionCollectionCollectionsEdges(BaseModel):
    node: "CollectionCollectionsCollectionCollectionCollectionsEdgesNode"


class CollectionCollectionsCollectionCollectionCollectionsEdgesNode(
    CollectionReference
):
    pass


class CollectionCollectionsCollectionCollectionCollectionsPageInfo(BaseModel):
    has_next_page: bool = Field(alias="hasNextPage")
    end_cursor: Optional[str] = Field(alias="endCursor")


class CollectionCollectionsCollectionCollectionNotFound(BaseModel):
    typename__: Literal["CollectionNotFound"] = Field(alias="__typename")


CollectionCollections.model_rebuild()
CollectionCollectionsCollectionCollection.model_rebuild()
CollectionCollectionsCollectionCollectionCollections.model_rebuild()
CollectionCollectionsCollectionCollectionCollectionsEdges.model_rebuild()
