// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type BuildEvent interface {
	IsBuildEvent()
}

type Element interface {
	IsElement()
	GetID() string
	GetName() string
	GetLabel() string
	GetGraphContext() *ElementGraphContext
}

type ElementGraphParent interface {
	IsElementGraphParent()
	GetID() string
}

type OrganizationInvitationAcceptResult interface {
	IsOrganizationInvitationAcceptResult()
}

type OrganizationInvitationCreateResult interface {
	IsOrganizationInvitationCreateResult()
}

type OrganizationInvitationQueryResult interface {
	IsOrganizationInvitationQueryResult()
}

type OrganizationQueryResult interface {
	IsOrganizationQueryResult()
}

type OrganizationRenameResult interface {
	IsOrganizationRenameResult()
}

type ToolDeleteResult interface {
	IsToolDeleteResult()
}

type ToolSessionEvent interface {
	IsToolSessionEvent()
}

type App struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	User        *User     `json:"user"`
	PublicURL   *string   `json:"publicUrl,omitempty"`
	SharedURL   *string   `json:"sharedUrl,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
}

type AppDeploy struct {
	App     *App   `json:"app"`
	BuildID string `json:"buildId"`
}

type BuildEventFailure struct {
	Result string `json:"result"`
}

func (BuildEventFailure) IsBuildEvent() {}

type BuildEventInfo struct {
	Result string `json:"result"`
}

func (BuildEventInfo) IsBuildEvent() {}

type BuildEventSuccess struct {
	Result string `json:"result"`
}

func (BuildEventSuccess) IsBuildEvent() {}

type Button struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Label        string               `json:"label"`
	GraphContext *ElementGraphContext `json:"graphContext"`
	Value        string               `json:"value"`
}

func (Button) IsElement()                                 {}
func (this Button) GetID() string                         { return this.ID }
func (this Button) GetName() string                       { return this.Name }
func (this Button) GetLabel() string                      { return this.Label }
func (this Button) GetGraphContext() *ElementGraphContext { return this.GraphContext }

type Container struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Label        string               `json:"label"`
	GraphContext *ElementGraphContext `json:"graphContext"`
}

func (Container) IsElement()                                 {}
func (this Container) GetID() string                         { return this.ID }
func (this Container) GetName() string                       { return this.Name }
func (this Container) GetLabel() string                      { return this.Label }
func (this Container) GetGraphContext() *ElementGraphContext { return this.GraphContext }

func (Container) IsElementGraphParent() {}

type ElementGraphContext struct {
	Parent     ElementGraphParent `json:"parent,omitempty"`
	AffectedBy []Element          `json:"affectedBy"`
	Affects    []Element          `json:"affects"`
}

type ElementInput struct {
	ElementID   string   `json:"elementID"`
	TextValue   *string  `json:"textValue,omitempty"`
	NumberValue *float64 `json:"numberValue,omitempty"`
	HTMLValue   *string  `json:"htmlValue,omitempty"`
	SliderValue *float64 `json:"sliderValue,omitempty"`
}

type ElementList struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Label        string               `json:"label"`
	GraphContext *ElementGraphContext `json:"graphContext"`
}

func (ElementList) IsElement()                                 {}
func (this ElementList) GetID() string                         { return this.ID }
func (this ElementList) GetName() string                       { return this.Name }
func (this ElementList) GetLabel() string                      { return this.Label }
func (this ElementList) GetGraphContext() *ElementGraphContext { return this.GraphContext }

func (ElementList) IsElementGraphParent() {}

type ElementSelect struct {
	ID             string               `json:"id"`
	Name           string               `json:"name"`
	Label          string               `json:"label"`
	GraphContext   *ElementGraphContext `json:"graphContext"`
	SelectedOption Element              `json:"selectedOption"`
}

func (ElementSelect) IsElement()                                 {}
func (this ElementSelect) GetID() string                         { return this.ID }
func (this ElementSelect) GetName() string                       { return this.Name }
func (this ElementSelect) GetLabel() string                      { return this.Label }
func (this ElementSelect) GetGraphContext() *ElementGraphContext { return this.GraphContext }

func (ElementSelect) IsElementGraphParent() {}

type ElementSelectInput struct {
	SelectElementID  string `json:"selectElementID"`
	SelectedOptionID string `json:"selectedOptionID"`
}

type HTMLElement struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Label        string               `json:"label"`
	GraphContext *ElementGraphContext `json:"graphContext"`
	HTML         string               `json:"html"`
}

func (HTMLElement) IsElement()                                 {}
func (this HTMLElement) GetID() string                         { return this.ID }
func (this HTMLElement) GetName() string                       { return this.Name }
func (this HTMLElement) GetLabel() string                      { return this.Label }
func (this HTMLElement) GetGraphContext() *ElementGraphContext { return this.GraphContext }

type InvalidEmail struct {
	Email string `json:"email"`
}

func (InvalidEmail) IsOrganizationInvitationCreateResult() {}

type Job struct {
	ID        string    `json:"id"`
	Status    *string   `json:"status,omitempty"`
	ProxyURL  *string   `json:"proxyUrl,omitempty"`
	User      *User     `json:"user"`
	CreatedAt time.Time `json:"createdAt"`
}

type ListElementInput struct {
	ListElementID string `json:"listElementID"`
}

type LogMessage struct {
	Time    time.Time `json:"time"`
	Message string    `json:"message"`
}

type Mutation struct{}

type NewOrganization struct {
	Name string `json:"name"`
}

type NewTool struct {
	UserID   string `json:"userId"`
	Manifest string `json:"manifest"`
}

type NumberField struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Label        string               `json:"label"`
	GraphContext *ElementGraphContext `json:"graphContext"`
	Value        float64              `json:"value"`
}

func (NumberField) IsElement()                                 {}
func (this NumberField) GetID() string                         { return this.ID }
func (this NumberField) GetName() string                       { return this.Name }
func (this NumberField) GetLabel() string                      { return this.Label }
func (this NumberField) GetGraphContext() *ElementGraphContext { return this.GraphContext }

type Organization struct {
	ID      string                    `json:"id"`
	Name    string                    `json:"name"`
	Slug    string                    `json:"slug"`
	Apps    []*App                    `json:"apps"`
	Members []*OrganizationMembership `json:"members"`
}

func (Organization) IsOrganizationRenameResult() {}

func (Organization) IsOrganizationQueryResult() {}

func (Organization) IsOrganizationInvitationAcceptResult() {}

type OrganizationInvitation struct {
	ID               string    `json:"id"`
	Email            string    `json:"email"`
	OrganizationName string    `json:"organizationName"`
	InvitedAt        time.Time `json:"invitedAt"`
	Role             Role      `json:"role"`
}

func (OrganizationInvitation) IsOrganizationInvitationQueryResult() {}

func (OrganizationInvitation) IsOrganizationInvitationCreateResult() {}

type OrganizationInvitationInput struct {
	Role  Role   `json:"role"`
	Email string `json:"email"`
}

type OrganizationInvitationNotFound struct {
	ID string `json:"id"`
}

func (OrganizationInvitationNotFound) IsOrganizationInvitationQueryResult() {}

type OrganizationMemberExists struct {
	Email string `json:"email"`
}

func (OrganizationMemberExists) IsOrganizationInvitationCreateResult() {}

type OrganizationMembership struct {
	Organization *Organization `json:"organization"`
	Role         Role          `json:"role"`
}

type OrganizationNotFound struct {
	ID   string `json:"id"`
	Slug string `json:"slug"`
}

func (OrganizationNotFound) IsOrganizationRenameResult() {}

func (OrganizationNotFound) IsOrganizationQueryResult() {}

func (OrganizationNotFound) IsOrganizationInvitationQueryResult() {}

func (OrganizationNotFound) IsOrganizationInvitationCreateResult() {}

func (OrganizationNotFound) IsOrganizationInvitationAcceptResult() {}

type OrganizationRenameFailure struct {
	Result string `json:"result"`
}

func (OrganizationRenameFailure) IsOrganizationRenameResult() {}

type PublicTool struct {
	Developer   *User   `json:"developer"`
	Name        string  `json:"name"`
	Description *string `json:"description,omitempty"`
	PictureURL  *string `json:"pictureUrl,omitempty"`
	PublicURL   string  `json:"publicUrl"`
}

type Query struct{}

type SliderElement struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Label        string               `json:"label"`
	GraphContext *ElementGraphContext `json:"graphContext"`
	Value        float64              `json:"value"`
	MinValue     float64              `json:"minValue"`
	MaxValue     float64              `json:"maxValue"`
}

func (SliderElement) IsElement()                                 {}
func (this SliderElement) GetID() string                         { return this.ID }
func (this SliderElement) GetName() string                       { return this.Name }
func (this SliderElement) GetLabel() string                      { return this.Label }
func (this SliderElement) GetGraphContext() *ElementGraphContext { return this.GraphContext }

type StopJobPayload struct {
	Message string `json:"message"`
}

type Subscription struct{}

type TextField struct {
	ID           string               `json:"id"`
	Name         string               `json:"name"`
	Label        string               `json:"label"`
	GraphContext *ElementGraphContext `json:"graphContext"`
	Value        string               `json:"value"`
}

func (TextField) IsElement()                                 {}
func (this TextField) GetID() string                         { return this.ID }
func (this TextField) GetName() string                       { return this.Name }
func (this TextField) GetLabel() string                      { return this.Label }
func (this TextField) GetGraphContext() *ElementGraphContext { return this.GraphContext }

type Tool struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	Description *string   `json:"description,omitempty"`
	User        *User     `json:"user"`
	PublicURL   *string   `json:"publicUrl,omitempty"`
	SharedURL   *string   `json:"sharedUrl,omitempty"`
	CreatedAt   time.Time `json:"createdAt"`
}

type ToolDeleteFailure struct {
	Result string `json:"result"`
}

func (ToolDeleteFailure) IsToolDeleteResult() {}

type ToolDeleteSuccess struct {
	Result string `json:"result"`
}

func (ToolDeleteSuccess) IsToolDeleteResult() {}

type ToolSession struct {
	ID          string    `json:"id"`
	Name        string    `json:"name"`
	AllElements []Element `json:"allElements"`
	IsActive    bool      `json:"isActive"`
	ClientID    string    `json:"clientID"`
	Title       string    `json:"title"`
}

type ToolSessionActionTriggered struct {
	Element *Button `json:"element"`
}

func (ToolSessionActionTriggered) IsToolSessionEvent() {}

type ToolSessionElementAdded struct {
	Element Element `json:"element"`
}

func (ToolSessionElementAdded) IsToolSessionEvent() {}

type ToolSessionElementRemoved struct {
	Element Element `json:"element"`
}

func (ToolSessionElementRemoved) IsToolSessionEvent() {}

type ToolSessionElementUpdated struct {
	Element Element `json:"element"`
}

func (ToolSessionElementUpdated) IsToolSessionEvent() {}

type User struct {
	FullName    string                    `json:"fullName"`
	Memberships []*OrganizationMembership `json:"memberships"`
}

type BuildConfiguration struct {
	BuildID string `json:"buildId"`
}

type AuthRole string

const (
	AuthRoleAuthenticated AuthRole = "AUTHENTICATED"
	AuthRoleAdmin         AuthRole = "ADMIN"
	AuthRoleUser          AuthRole = "USER"
)

var AllAuthRole = []AuthRole{
	AuthRoleAuthenticated,
	AuthRoleAdmin,
	AuthRoleUser,
}

func (e AuthRole) IsValid() bool {
	switch e {
	case AuthRoleAuthenticated, AuthRoleAdmin, AuthRoleUser:
		return true
	}
	return false
}

func (e AuthRole) String() string {
	return string(e)
}

func (e *AuthRole) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AuthRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AuthRole", str)
	}
	return nil
}

func (e AuthRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ToolHashType string

const (
	ToolHashTypePublic ToolHashType = "public"
	ToolHashTypeShared ToolHashType = "shared"
)

var AllToolHashType = []ToolHashType{
	ToolHashTypePublic,
	ToolHashTypeShared,
}

func (e ToolHashType) IsValid() bool {
	switch e {
	case ToolHashTypePublic, ToolHashTypeShared:
		return true
	}
	return false
}

func (e ToolHashType) String() string {
	return string(e)
}

func (e *ToolHashType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ToolHashType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ToolHashType", str)
	}
	return nil
}

func (e ToolHashType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
